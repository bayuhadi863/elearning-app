"use client";
import {
  ComponentBase,
  useHandleStyle,
  useUnmountEffect
} from "./chunk-Z5NRZBLR.js";
import {
  PrimeReactContext,
  classNames,
  mergeProps
} from "./chunk-DBRJEFC2.js";
import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/primereact/chart/chart.esm.js
var React = __toESM(require_react());
var ChartBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Chart",
    id: null,
    type: null,
    data: null,
    options: null,
    plugins: null,
    width: null,
    height: null,
    style: null,
    className: null,
    children: void 0
  },
  css: {
    classes: {
      root: function root(_ref) {
        var props = _ref.props;
        return classNames("p-chart", props.className);
      }
    },
    inlineStyles: {
      root: function root2(_ref2) {
        var props = _ref2.props;
        return Object.assign({
          width: props.width,
          height: props.height
        }, props.style);
      }
    },
    styles: "\n        @layer primereact {\n            .p-chart {\n                position: relative\n            }\n        }\n        "
  }
});
var ChartJS = function() {
  try {
    return Chart;
  } catch (_unused) {
    return null;
  }
}();
var PrimeReactChart = React.memo(React.forwardRef(function(inProps, ref) {
  var context = React.useContext(PrimeReactContext);
  var props = ChartBase.getProps(inProps, context);
  var _ChartBase$setMetaDat = ChartBase.setMetaData({
    props
  }), ptm = _ChartBase$setMetaDat.ptm, cx = _ChartBase$setMetaDat.cx, sx = _ChartBase$setMetaDat.sx, isUnstyled = _ChartBase$setMetaDat.isUnstyled;
  useHandleStyle(ChartBase.css.styles, isUnstyled, {
    name: "chart"
  });
  var elementRef = React.useRef(null);
  var chartRef = React.useRef(null);
  var canvasRef = React.useRef(null);
  var initChart = function initChart2() {
    destroyChart();
    var configuration = {
      type: props.type,
      data: props.data,
      options: props.options,
      plugins: props.plugins
    };
    if (ChartJS) {
      chartRef.current = new ChartJS(canvasRef.current, configuration);
    } else {
      import("./auto-VZO7QZ27.js").then(function(module) {
        destroyChart();
        if (!canvasRef.current) {
          return;
        }
        if (module) {
          if (module["default"]) {
            chartRef.current = new module["default"](canvasRef.current, configuration);
          } else {
            chartRef.current = new module(canvasRef.current, configuration);
          }
        }
      });
    }
  };
  var destroyChart = function destroyChart2() {
    if (chartRef.current) {
      chartRef.current.destroy();
      chartRef.current = null;
    }
  };
  React.useImperativeHandle(ref, function() {
    return {
      props,
      getCanvas: function getCanvas() {
        return canvasRef.current;
      },
      getChart: function getChart() {
        return chartRef.current;
      },
      getBase64Image: function getBase64Image() {
        return chartRef.current.toBase64Image();
      },
      getElement: function getElement() {
        return elementRef.current;
      },
      generateLegend: function generateLegend() {
        return chartRef.current && chartRef.current.generateLegend();
      },
      refresh: function refresh() {
        return chartRef.current && chartRef.current.update();
      }
    };
  });
  React.useEffect(function() {
    initChart();
  });
  useUnmountEffect(function() {
    destroyChart();
  });
  var title = props.options && props.options.plugins && props.options.plugins.title && props.options.plugins.title.text;
  var ariaLabel = props.ariaLabel || title;
  var rootProps = mergeProps({
    id: props.id,
    ref: elementRef,
    style: sx("root"),
    className: cx("root")
  }, ChartBase.getOtherProps(props), ptm("root"));
  var canvasProps = mergeProps({
    ref: canvasRef,
    width: props.width,
    height: props.height,
    role: "img",
    "aria-label": ariaLabel
  }, ptm("canvas"));
  return React.createElement("div", rootProps, React.createElement("canvas", canvasProps));
}), function(prevProps, nextProps) {
  return prevProps.data === nextProps.data && prevProps.options === nextProps.options && prevProps.type === nextProps.type;
});
PrimeReactChart.displayName = "Chart";
export {
  PrimeReactChart as Chart
};
//# sourceMappingURL=primereact_chart.js.map
