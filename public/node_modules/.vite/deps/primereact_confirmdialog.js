"use client";
import {
  Dialog
} from "./chunk-HJJY3DNJ.js";
import "./chunk-7XA5IINS.js";
import {
  OverlayService
} from "./chunk-NOBKRYMU.js";
import {
  Button
} from "./chunk-2OKWCGNZ.js";
import "./chunk-R3N3NLPP.js";
import "./chunk-VFNNQF7S.js";
import "./chunk-66LBV25E.js";
import "./chunk-DXSYAR4N.js";
import "./chunk-U4LF42UJ.js";
import "./chunk-PFNM7CRX.js";
import "./chunk-47ETVG52.js";
import {
  Portal
} from "./chunk-4SLIM2PL.js";
import "./chunk-GVSLPJMJ.js";
import {
  ComponentBase,
  useUnmountEffect,
  useUpdateEffect
} from "./chunk-Z5NRZBLR.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  classNames,
  localeOption,
  mergeProps
} from "./chunk-DBRJEFC2.js";
import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/primereact/confirmdialog/confirmdialog.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var classes = {
  root: "p-confirm-dialog",
  message: "p-confirm-dialog-message",
  icon: "p-confirm-dialog-icon",
  acceptButton: "p-confirm-dialog-accept",
  rejectButton: function rejectButton(_ref) {
    var getPropValue = _ref.getPropValue;
    return classNames("p-confirm-dialog-reject", {
      "p-button-text": !getPropValue("rejectClassName")
    });
  }
};
var ConfirmDialogBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "ConfirmDialog",
    tagKey: void 0,
    visible: void 0,
    message: null,
    rejectLabel: null,
    acceptLabel: null,
    icon: null,
    rejectIcon: null,
    acceptIcon: null,
    rejectClassName: null,
    acceptClassName: null,
    className: null,
    appendTo: null,
    footer: null,
    breakpoints: null,
    onHide: null,
    accept: null,
    reject: null,
    children: void 0
  },
  css: {
    classes
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var confirmDialog = function confirmDialog2() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  props = _objectSpread(_objectSpread({}, props), {
    visible: props.visible === void 0 ? true : props.visible
  });
  props.visible && OverlayService.emit("confirm-dialog", props);
  var show = function show2() {
    var updatedProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    OverlayService.emit("confirm-dialog", _objectSpread(_objectSpread(_objectSpread({}, props), updatedProps), {
      visible: true
    }));
  };
  var hide = function hide2() {
    OverlayService.emit("confirm-dialog", {
      visible: false
    });
  };
  return {
    show,
    hide
  };
};
var ConfirmDialog = React.memo(React.forwardRef(function(inProps, ref) {
  var context = React.useContext(PrimeReactContext);
  var props = ConfirmDialogBase.getProps(inProps, context);
  var _React$useState = React.useState(props.visible), _React$useState2 = _slicedToArray(_React$useState, 2), visibleState = _React$useState2[0], setVisibleState = _React$useState2[1];
  var _React$useState3 = React.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), reshowState = _React$useState4[0], setReshowState = _React$useState4[1];
  var confirmProps = React.useRef(null);
  var isCallbackExecuting = React.useRef(false);
  var focusElementOnHide = React.useRef(null);
  var getCurrentProps = function getCurrentProps2() {
    return confirmProps.current || props;
  };
  var getPropValue = function getPropValue2(key) {
    return (confirmProps.current || props)[key];
  };
  var callbackFromProp = function callbackFromProp2(key) {
    for (var _len = arguments.length, param = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      param[_key - 1] = arguments[_key];
    }
    return ObjectUtils.getPropValue(getPropValue(key), param);
  };
  var acceptLabel = getPropValue("acceptLabel") || localeOption("accept");
  var rejectLabel = getPropValue("rejectLabel") || localeOption("reject");
  var metaData = {
    props,
    state: {
      visible: visibleState
    }
  };
  var _ConfirmDialogBase$se = ConfirmDialogBase.setMetaData(metaData), ptm = _ConfirmDialogBase$se.ptm, cx = _ConfirmDialogBase$se.cx;
  var accept = function accept2() {
    if (!isCallbackExecuting.current) {
      isCallbackExecuting.current = true;
      callbackFromProp("accept");
      hide("accept");
    }
  };
  var reject = function reject2() {
    if (!isCallbackExecuting.current) {
      isCallbackExecuting.current = true;
      callbackFromProp("reject");
      hide("reject");
    }
  };
  var show = function show2() {
    setVisibleState(true);
    isCallbackExecuting.current = false;
    focusElementOnHide.current = document.activeElement;
  };
  var hide = function hide2() {
    var result = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cancel";
    setVisibleState(false);
    callbackFromProp("onHide", {
      result
    });
    DomHandler.focus(focusElementOnHide.current);
    focusElementOnHide.current = null;
  };
  var confirm = function confirm2(updatedProps) {
    if (updatedProps.tagKey === props.tagKey) {
      var isVisibleChanged = visibleState !== updatedProps.visible;
      var targetChanged = getPropValue("target") !== updatedProps.target;
      if (targetChanged && !props.target) {
        hide();
        confirmProps.current = updatedProps;
        setReshowState(true);
      } else if (isVisibleChanged) {
        confirmProps.current = updatedProps;
        updatedProps.visible ? show() : hide();
      }
    }
  };
  React.useEffect(function() {
    props.visible ? show() : hide();
  }, [props.visible]);
  React.useEffect(function() {
    if (!props.target && !props.message) {
      OverlayService.on("confirm-dialog", confirm);
    }
    return function() {
      OverlayService.off("confirm-dialog", confirm);
    };
  }, [props.target]);
  useUpdateEffect(function() {
    reshowState && show();
  }, [reshowState]);
  useUnmountEffect(function() {
    OverlayService.off("confirm-dialog", confirm);
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      confirm
    };
  });
  var createFooter = function createFooter2() {
    var acceptClassName = classNames("p-confirm-dialog-accept", getPropValue("acceptClassName"));
    var rejectClassName = classNames("p-confirm-dialog-reject", {
      "p-button-text": !getPropValue("rejectClassName")
    }, getPropValue("rejectClassName"));
    var rejectButtonProps = {
      label: rejectLabel,
      icon: getPropValue("rejectIcon"),
      className: classNames(getPropValue("rejectClassName"), cx("rejectButton", {
        getPropValue
      })),
      onClick: reject,
      pt: ptm("rejectButton"),
      unstyled: props.unstyled,
      __parentMetadata: {
        parent: metaData
      }
    };
    var acceptButtonProps = mergeProps({
      label: acceptLabel,
      icon: getPropValue("acceptIcon"),
      className: classNames(getPropValue("acceptClassName"), cx("acceptButton")),
      onClick: accept,
      unstyled: props.unstyled,
      __parentMetadata: {
        parent: metaData
      }
    }, ptm("acceptButton"));
    var content = React.createElement(React.Fragment, null, React.createElement(Button, rejectButtonProps), React.createElement(Button, _extends({}, acceptButtonProps, {
      autoFocus: true
    })));
    if (getPropValue("footer")) {
      var defaultContentOptions = {
        accept,
        reject,
        acceptClassName,
        rejectClassName,
        acceptLabel,
        rejectLabel,
        element: content,
        props: getCurrentProps()
      };
      return ObjectUtils.getJSXElement(getPropValue("footer"), defaultContentOptions);
    }
    return content;
  };
  var createElement2 = function createElement3() {
    var currentProps = getCurrentProps();
    var message = ObjectUtils.getJSXElement(getPropValue("message"), currentProps);
    var iconProps = mergeProps({
      className: cx("icon")
    }, ptm("icon"));
    var icon = IconUtils.getJSXIcon(getPropValue("icon"), _objectSpread({}, iconProps), {
      props: currentProps
    });
    var footer = createFooter();
    var messageProps = mergeProps({
      className: cx("message")
    }, ptm("message"));
    var rootProps = mergeProps({
      visible: visibleState,
      className: classNames(getPropValue("className"), cx("root")),
      footer,
      onHide: hide,
      breakpoints: getPropValue("breakpoints"),
      pt: currentProps.pt,
      unstyled: props.unstyled,
      appendTo: getPropValue("appendTo"),
      __parentMetadata: {
        parent: metaData
      }
    }, ConfirmDialogBase.getOtherProps(currentProps));
    return React.createElement(Dialog, rootProps, icon, React.createElement("span", messageProps, message));
  };
  var element = createElement2();
  return React.createElement(Portal, {
    element,
    appendTo: getPropValue("appendTo")
  });
}));
ConfirmDialog.displayName = "ConfirmDialog";
export {
  ConfirmDialog,
  confirmDialog
};
//# sourceMappingURL=primereact_confirmdialog.js.map
