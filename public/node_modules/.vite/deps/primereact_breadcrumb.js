"use client";
import {
  ChevronRightIcon
} from "./chunk-YHA4QNQD.js";
import "./chunk-PFNM7CRX.js";
import {
  ComponentBase,
  useHandleStyle,
  useMountEffect
} from "./chunk-Z5NRZBLR.js";
import {
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  UniqueComponentId,
  classNames,
  mergeProps
} from "./chunk-DBRJEFC2.js";
import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/primereact/breadcrumb/breadcrumb.esm.js
var React = __toESM(require_react());
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var classes = {
  icon: "p-menuitem-icon",
  action: "p-menuitem-link",
  label: "p-menuitem-text",
  home: function home(_ref) {
    var _className = _ref._className, disabled = _ref.disabled;
    return classNames("p-breadcrumb-home", {
      "p-disabled": disabled
    }, _className);
  },
  separatorIcon: "p-breadcrumb-chevron",
  separator: "p-menuitem-separator",
  menuitem: function menuitem(_ref2) {
    var item = _ref2.item;
    return classNames("p-menuitem", item.className, {
      "p-disabled": item.disabled
    });
  },
  menu: "p-breadcrumb-list",
  root: function root(_ref3) {
    var props = _ref3.props;
    return classNames("p-breadcrumb p-component", props.className);
  }
};
var styles = "\n@layer primereact {\n    .p-breadcrumb {\n        overflow-x: auto;\n    }\n    \n    .p-breadcrumb ul {\n        margin: 0;\n        padding: 0;\n        list-style-type: none;\n        display: flex;\n        align-items: center;\n        flex-wrap: nowrap;\n    }\n    \n    .p-breadcrumb .p-menuitem-text {\n        line-height: 1;\n    }\n    \n    .p-breadcrumb .p-menuitem-link {\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n    }\n    \n    .p-breadcrumb .p-menuitem-separator {\n        display: flex;\n        align-items: center;\n    }\n    \n    .p-breadcrumb::-webkit-scrollbar {\n        display: none;\n    }\n}\n";
var BreadCrumbBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "BreadCrumb",
    id: null,
    model: null,
    home: null,
    separatorIcon: null,
    style: null,
    className: null,
    children: void 0
  },
  css: {
    classes,
    styles
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var BreadCrumb = React.memo(React.forwardRef(function(inProps, ref) {
  var context = React.useContext(PrimeReactContext);
  var props = BreadCrumbBase.getProps(inProps, context);
  var _React$useState = React.useState(props.id), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var elementRef = React.useRef(null);
  var _BreadCrumbBase$setMe = BreadCrumbBase.setMetaData({
    props,
    state: {
      id: idState
    }
  }), ptm = _BreadCrumbBase$setMe.ptm, cx = _BreadCrumbBase$setMe.cx, isUnstyled = _BreadCrumbBase$setMe.isUnstyled;
  useHandleStyle(BreadCrumbBase.css.styles, isUnstyled, {
    name: "breadcrumb"
  });
  var itemClick = function itemClick2(event, item) {
    if (item.disabled) {
      event.preventDefault();
      return;
    }
    if (!item.url) {
      event.preventDefault();
    }
    if (item.command) {
      item.command({
        originalEvent: event,
        item
      });
    }
  };
  var createHome = function createHome2(index) {
    var home3 = props.home;
    if (home3) {
      if (home3.visible === false) {
        return null;
      }
      var _icon = home3.icon, target = home3.target, url = home3.url, disabled = home3.disabled, style = home3.style, _className = home3.className, template = home3.template, _label = home3.label;
      var iconProps = mergeProps({
        className: cx("icon")
      }, ptm("icon"));
      var icon = IconUtils.getJSXIcon(_icon, _objectSpread({}, iconProps), {
        props
      });
      var actionProps = mergeProps({
        href: url || "#",
        className: cx("action"),
        "aria-disabled": disabled,
        target,
        onClick: function onClick(event) {
          return itemClick(event, home3);
        }
      }, ptm("action"));
      var labelProps = mergeProps({
        className: cx("label")
      }, ptm("label"));
      var label = _label && React.createElement("span", labelProps, _label);
      var content = React.createElement("a", actionProps, icon, label);
      if (template) {
        var defaultContentOptions = {
          onClick: function onClick(event) {
            return itemClick(event, home3);
          },
          className: "p-menuitem-link",
          labelClassName: "p-menuitem-text",
          element: content,
          props
        };
        content = ObjectUtils.getJSXElement(template, home3, defaultContentOptions);
      }
      var key = idState + "_home";
      var menuitemProps = mergeProps({
        id: key,
        key,
        className: cx("home", {
          _className,
          disabled
        }),
        style
      }, ptm("home"));
      return React.createElement("li", menuitemProps, content);
    }
    return null;
  };
  var createSeparator = function createSeparator2(index) {
    var key = idState + "_sep_" + index;
    var separatorIconProps = mergeProps({
      className: cx("separatorIcon")
    }, ptm("separatorIcon"));
    var icon = props.separatorIcon || React.createElement(ChevronRightIcon, separatorIconProps);
    var separatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, separatorIconProps), {
      props
    });
    var separatorProps = mergeProps({
      id: key,
      key,
      className: cx("separator"),
      role: "separator"
    }, ptm("separator"));
    return React.createElement("li", separatorProps, separatorIcon);
  };
  var createMenuitem = function createMenuitem2(item, index) {
    if (item.visible === false) {
      return null;
    }
    var labelProps = mergeProps({
      className: cx("label")
    }, ptm("label"));
    var label = item.label && React.createElement("span", labelProps, item.label);
    var actionProps = mergeProps({
      href: item.url || "#",
      className: cx("action"),
      target: item.target,
      onClick: function onClick(event) {
        return itemClick(event, item);
      },
      "aria-disabled": item.disabled
    }, ptm("action"));
    var content = React.createElement("a", actionProps, label);
    if (item.template) {
      var defaultContentOptions = {
        onClick: function onClick(event) {
          return itemClick(event, item);
        },
        className: "p-menuitem-link",
        labelClassName: "p-menuitem-text",
        element: content,
        props
      };
      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);
    }
    var key = item.id || idState + "_" + index;
    var menuitemProps = mergeProps({
      id: key,
      key,
      className: cx("menuitem", {
        item
      }),
      style: item.style
    }, ptm("menuitem"));
    return React.createElement("li", menuitemProps, content);
  };
  var createMenuitems = function createMenuitems2() {
    if (props.model) {
      var _items = props.model.map(function(item, index) {
        if (item.visible === false) {
          return null;
        }
        var menuitem2 = createMenuitem(item, index);
        var separator2 = index === props.model.length - 1 ? null : createSeparator(index);
        var key = idState + "_" + index;
        return React.createElement(React.Fragment, {
          key
        }, menuitem2, separator2);
      });
      return _items;
    }
    return null;
  };
  useMountEffect(function() {
    if (!idState) {
      setIdState(UniqueComponentId());
    }
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  var home2 = createHome();
  var items = createMenuitems();
  var separator = createSeparator("home");
  var menuProps = mergeProps({
    className: cx("menu")
  }, ptm("menu"));
  var rootProps = mergeProps({
    id: props.id,
    ref: elementRef,
    className: cx("root"),
    style: props.style,
    "aria-label": "Breadcrumb"
  }, BreadCrumbBase.getOtherProps(props), ptm("root"));
  return React.createElement("nav", rootProps, React.createElement("ul", menuProps, home2, separator, items));
}));
BreadCrumb.displayName = "BreadCrumb";
export {
  BreadCrumb
};
//# sourceMappingURL=primereact_breadcrumb.js.map
